(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{537:function(e,t,s){"use strict";s.r(t);var n=s(2),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[e._v("#")]),e._v(" 前言")]),e._v(" "),s("p",[e._v("源码阅读可能会迟到，但是一定不会缺席！")]),e._v(" "),s("p",[e._v("众所周知，以下代码就是 vue 的一种直接上手方式。通过 cdn 可以在线打开 vue.js。一个文件，一万行源码，能让万千开发者赖以生存，它究竟做了什么？让人品味。")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("<html>\n<head></head>\n<body>\n    <div id=\"app\">\n        {{ message }}\n    </div>\n</body>\n<script src=\"https://cdn.jsdelivr.net/npm/vue/dist/vue.js\"><\/script>\n<script>\n    var app = new Vue({\n        el: '#app',\n        data: {\n            message: 'See Vue again!'\n        },\n    })\n<\/script>\n</html>\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br")])]),s("p",[e._v("源码cdn地址："),s("a",{attrs:{href:"https://cdn.jsdelivr.net/npm/vue/dist/vue.js",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://cdn.jsdelivr.net/npm/vue/dist/vue.js"),s("OutboundLink")],1),e._v("，当下版本：v2.6.11")]),e._v(" "),s("p",[e._v("选择生啃的原因是，自认为已经有一定的基础，且可以更自主地选择代码段分轻重来阅读，一方面测试自己的掌握程度，一方面追求更直观的源码阅读。")]),e._v(" "),s("p",[e._v("当然你也可以选择在 "),s("a",{attrs:{href:"https://github.com/vuejs/vue/tree/dev/src",target:"_blank",rel:"noopener noreferrer"}},[e._v("https://github.com/vuejs/vue/tree/dev/src"),s("OutboundLink")],1),e._v(" 分模块的阅读，也可以看各路大神的归类整理。")]),e._v(" "),s("p",[e._v("笔者尽量按 500 行作为一个模块来形成一个 md 文件，结合注释、自己的理解、以及附上对应查询链接来逐行细读源码。")]),e._v(" "),s("p",[e._v("目的：自我梳理，分享交流。")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc1.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（1/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc2.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（2/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc3.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（3/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc4.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（4/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc5.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（5/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc6.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（6/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc7.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（7/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc8.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（8/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc9.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（9/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc10.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（10/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc11.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（11/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc12.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（12/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc13.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（13/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc14.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（14/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc15.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（15/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc16.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（16/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc17.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（17/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc18.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（18/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc19.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（19/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc20.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（20/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc20.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（21/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc20.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（22/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc20.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（23/24）"),s("OutboundLink")],1)]),e._v(" "),s("li",[s("a",{attrs:{href:"https://tuaran.github.io/views/2020/studyVuesc20.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Vue.js v2.6.11 生啃一万行源码（24/24）"),s("OutboundLink")],1)])]),e._v(" "),s("h2",{attrs:{id:"正文"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[e._v("#")]),e._v(" 正文")]),e._v(" "),s("h3",{attrs:{id:"第-9916-行至第-10435-行"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第-9916-行至第-10435-行"}},[e._v("#")]),e._v(" 第 9916 行至第 10435 行")]),e._v(" "),s("p",[e._v("🙌 到 1w 行了，自我庆祝一下！")]),e._v(" "),s("ul",[s("li",[e._v("processRawAttrs // parse 方法里用到的工具函数 用于将特性保存到AST对象的attrs属性上")]),e._v(" "),s("li",[e._v("processElement// parse 方法工具函数 元素填充")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("export function processElement (\n  element: ASTElement,\n  options: CompilerOptions\n) {\n  processKey(element)\n\n  // determine whether this is a plain element after\n  // removing structural attributes\n  element.plain = (\n    !element.key &&\n    !element.scopedSlots &&\n    !element.attrsList.length\n  )\n\n  processRef(element)\n  processSlotContent(element)\n  processSlotOutlet(element)\n  processComponent(element)\n  for (let i = 0; i < transforms.length; i++) {\n    element = transforms[i](element, options) || element\n  }\n  processAttrs(element)\n  return element\n}\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br")])]),s("p",[e._v("可以看到主要函数包括：processKey、processRef、processSlotContent、processSlotOutlet、processComponent、processAttrs 和最后遍历执行的transforms。")]),e._v(" "),s("p",[e._v("processElement完成的slotTarget的赋值，这里则是将所有的slot创建的astElement以对象的形式赋值给currentParent的scopedSlots。以便后期组件内部实例话的时候可以方便去使用vm.$$slot。")]),e._v(" "),s("ul",[s("li",[e._v("processKey")]),e._v(" "),s("li",[e._v("processRef")])]),e._v(" "),s("ol",[s("li",[s("p",[e._v("首先最为简单的是processKey和processRef,在这两个函数处理之前，我们的key属性和ref属性都是保存在astElement上面的attrs和attrsMap，经过这两个函数之后，attrs里面的key和ref会被干掉，变成astElement的直属属性。")])]),e._v(" "),s("li",[s("p",[e._v("探讨一下slot的处理方式，我们知道的是，slot的具体位置是在组件中定义的，而需要替换的内容又是组件外面嵌套的代码，Vue对这两块的处理是分开的。")])])]),e._v(" "),s("p",[e._v("先说组件内的属性摘取，主要是slot标签的name属性，这是processSlotOutLet完成的。")]),e._v(" "),s("ul",[s("li",[e._v("processFor")]),e._v(" "),s("li",[e._v("parseFor")]),e._v(" "),s("li",[e._v("processIf")]),e._v(" "),s("li",[e._v("processIfConditions")]),e._v(" "),s("li",[e._v("findPrevElement")]),e._v(" "),s("li",[e._v("addIfCondition")]),e._v(" "),s("li",[e._v("processOnce")]),e._v(" "),s("li",[e._v("processSlotContent")]),e._v(" "),s("li",[e._v("getSlotName")]),e._v(" "),s("li",[e._v("processSlotOutlet")])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// handle <slot/> outlets\nfunction processSlotOutlet (el) {\n  if (el.tag === 'slot') {\n    el.slotName = getBindingAttr(el, 'name') // 就是这一句了。\n    if (process.env.NODE_ENV !== 'production' && el.key) {\n      warn(\n        `\\`key\\` does not work on <slot> because slots are abstract outlets ` +\n        `and can possibly expand into multiple elements. ` +\n        `Use the key on a wrapping element instead.`,\n        getRawBindingAttr(el, 'key')\n      )\n    }\n  }\n}\n// 其次是摘取需要替换的内容，也就是 processSlotContent，这是是处理展示在组件内部的slot，但是在这个地方只是简单的将给el添加两个属性作用域插槽的slotScope和 slotTarget，也就是目标slot。\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("ul",[s("li",[e._v("processComponent // processComponent 并不是处理component，而是摘取动态组件的is属性。 processAttrs是获取所有的属性和动态属性。")]),e._v(" "),s("li",[e._v("processAttrs")]),e._v(" "),s("li",[e._v("checkInFor")]),e._v(" "),s("li",[e._v("parseModifiers")]),e._v(" "),s("li",[e._v("makeAttrsMap")])]),e._v(" "),s("p",[e._v("这一部分仍是衔接这 parse function 里的具体实现：start、end、comment、chars四大函数。")]),e._v(" "),s("p",[e._v("流程再回顾一下：")]),e._v(" "),s("p",[e._v("一、普通标签处理流程描述")]),e._v(" "),s("ol",[s("li",[e._v("识别开始标签，生成匹配结构match。")])]),e._v(" "),s("p",[e._v("const match = { // 匹配startTag的数据结构\ntagName: 'div',\nattrs: [\n{ 'id=\"xxx\"','id','=','xxx' },\n...\n],\nstart: index,\nend: xxx\n}\n复制代码\n2. 处理attrs，将数组处理成 {name:'xxx',value:'xxx'}\n3. 生成astElement，处理for,if和once的标签。\n4. 识别结束标签，将没有闭合标签的元素一起处理。\n5. 建立父子关系，最后再对astElement做所有跟Vue 属性相关对处理。slot、component等等。")]),e._v(" "),s("p",[e._v("二、文本或表达式的处理流程描述。")]),e._v(" "),s("ol",[s("li",[e._v("截取符号<之前的字符串，这里一定是所有的匹配规则都没有匹配上，只可能是文本了。")]),e._v(" "),s("li",[e._v("使用chars函数处理该字符串。")]),e._v(" "),s("li",[e._v("判断字符串是否含有delimiters，默认也就是${},有的话创建type为2的节点，否则type为3.")])]),e._v(" "),s("p",[e._v("三、注释流程描述")]),e._v(" "),s("ol",[s("li",[e._v("匹配注释符号。")]),e._v(" "),s("li",[e._v("使用comment函数处理。")]),e._v(" "),s("li",[e._v("直接创建type为3的节点。")])]),e._v(" "),s("p",[s("a",{attrs:{href:"https://juejin.im/post/5d01b954f265da1bbf69172e",target:"_blank",rel:"noopener noreferrer"}},[e._v("参考 link"),s("OutboundLink")],1)]),e._v(" "),s("h3",{attrs:{id:"阶段小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#阶段小结"}},[e._v("#")]),e._v(" 阶段小结")]),e._v(" "),s("p",[e._v("parseHTML() 和 parse() 这两个函数占了很大的篇幅，值得重点去看看。的确也很多细节，一些正则的匹配，字符串的操作等。从宏观上把握从 template 到 vnode 的 parse 流程也无大问题。")])])}),[],!1,null,null,null);t.default=r.exports}}]);